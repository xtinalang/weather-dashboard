name: Production CI

on:
  push:
    branches: [ main, master, production, Production ]
  pull_request:
    branches: [ main, master, production, Production ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.5.25"
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          uv sync --dev
          uv pip install -e .

      - name: Run ruff linting (strict mode)
        run: |
          uv run ruff check . --diff --exclude Experimental --exclude .venv --exclude dist
          uv run ruff format --check . --exclude Experimental --exclude .venv --exclude dist

      - name: Run flake8 (strict mode)
        run: |
          uv run flake8 . --count --statistics --exclude=Experimental,.venv,dist

      - name: Run mypy type checking (strict mode)
        run: |
          uv run mypy weather_app/ --strict

      - name: Run tests with pytest and coverage
        env:
          WEATHER_API_KEY: ${{ secrets.WEATHER_API_KEY }}
        run: |
          uv add coverage --dev
          uv run coverage run -m pytest --verbose --tb=short
          uv run coverage report --fail-under=80
          uv run coverage xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.5.25"
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Run security scan
        run: |
          uv add safety bandit --dev
          uv run safety check
          uv run bandit -r weather_app/

  build-and-test:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.5.25"
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Build package
        run: |
          uv build

      - name: Test package installation
        run: |
          uv add dist/*.whl
          uv run weather-dashboard --help

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/

  integration-tests:
    runs-on: ubuntu-latest
    needs: [build-and-test]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: weather_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.5.25"
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install dependencies
        run: |
          uv sync --dev
          uv pip install -e .

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/weather_test
          WEATHER_API_KEY: ${{ secrets.WEATHER_API_KEY }}
        run: |
          uv run pytest tests/ -k "integration" --verbose || echo "No integration tests found"

  docker-build:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.web
          push: false
          tags: weather-app:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [integration-tests, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # For example, updating a staging server, K8s deployment, etc.

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-staging.result }}" == "success" ]; then
            echo "✅ Production CI passed and staging deployment successful"
          else
            echo "❌ Production CI failed or staging deployment failed"
          fi
